Recursive 


class Solution
{
    //Function to find the length of longest common subsequence in two strings.
    static int lcs(int x, int y, String s1, String s2)
    {
        // your code here
        
        if(x==0 || y==0)
        return 0;
        
        if(s1.charAt(x-1)==s2.charAt(y-1))
        return 1+lcs(x-1,y-1,s1.substring(0,x-1),s2.substring(0,y-1));
        else
        return Math.max(lcs(x-1,y,s1.substring(0,x-1),s2),lcs(x,y-1,s1,s2.substring(0,y-1)));
    }
    
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Memoisation

class Solution
{
    //Function to find the length of longest common subsequence in two strings.
     static int t[][]= new int[1001][1001];
    static int lcs(int x, int y, String s1, String s2)
    {
        // your code here
        
       
       if(x==0 || y==0)
        return 0;
       for (int[] row: t)
       Arrays.fill(row, -1);
        
        return func(x,y,s1,s2);
        
       
    }
    
    static int func(int x,int y,String s1, String s2)
    {
         if(x==0 || y==0)
        return 0;
        if(t[x][y]!=-1)
        return t[x][y];
         if(s1.charAt(x-1)==s2.charAt(y-1))
        return t[x][y]= 1+func(x-1,y-1,s1.substring(0,x-1),s2.substring(0,y-1));
        else
        return t[x][y]= Math.max(func(x-1,y,s1.substring(0,x-1),s2),func(x,y-1,s1,s2.substring(0,y-1)));
    }
    
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Dynamic programming



class Solution
{
    //Function to find the length of longest common subsequence in two strings.
    static int lcs(int x, int y, String s1, String s2)
    {
        // your code here
        int dp[][]= new int[x+1][y+1];
        if(x==0 || y==0)
        return 0;
        for(int i=0;i<=x;i++)
        {
            dp[i][0]=0;
        }
         for(int i=0;i<=y;i++)
        {
            dp[0][i]=0;
        }
        
        for(int i=1;i<=x;i++)
        {
            for(int j=1;j<=y;j++)
            {
                if(s1.charAt(i-1)==s2.charAt(j-1))
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[x][y];
    }
    
}
